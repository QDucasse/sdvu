-- Author: Quentin Ducasse
--   mail:   quentin.ducasse@ensta-bretagne.org
--   github: QDucasse
-- =================================
-- Read-only memory where program instructions are stored.

-- AUTO GENERATED FILE WITH FILLED MEMORY

-- =================
--    Libraries
-- =================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

use std.textio.all;

library work;
use work.sdvu_constants.all;

-- =================
--      Entity
-- =================

entity auto_program_memory is
    port (I_clock   : in STD_LOGIC; -- Clock
          I_reset   : in STD_LOGIC; -- Reset
          I_enable  : in STD_LOGIC; -- Enable

          I_PC    : in STD_LOGIC_VECTOR (PC_SIZE-1 downto 0)     := (others => '0'); -- Address of the new instruction
          O_data  : out STD_LOGIC_VECTOR (INSTR_SIZE-1 downto 0) := (others => '0')  -- Data at address
          );
end auto_program_memory;

-- =================
--   Architecture
-- =================

architecture arch_auto_program_memory of auto_program_memory is
    -- Internal objects
    signal memory_content: prog_memory := (
      {% for instruction in instructions %}
        X"{{instruction}}"{% if not loop.last %},{% endif %}
      {%- endfor %}
    );

begin
  -- Processes
  TransferData: process(I_clock) -- I_clock added to the sensitivity list of the process
  begin

      if rising_edge(I_clock) then  -- If new cycle
        if I_reset = '1' then     -- Reset
          memory_content <= (
            {% for instruction in instructions %}
              X"{{instruction}}"{% if not loop.last %},{% endif %}
            {%- endfor %}
          );
        elsif I_enable = '1' then
          -- Read from the address to the output
          O_data <= memory_content(to_integer(unsigned(I_PC(7 downto 0))));
        end if;
    end if;
  end process;
end arch_auto_program_memory;
